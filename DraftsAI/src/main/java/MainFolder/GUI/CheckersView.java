/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MainFolder.GUI;

import MainFolder.Board;
import MainFolder.Checkers.AlphaBetaAgent;
import MainFolder.Checkers.Checkers;
import MainFolder.Checkers.MinimaxAgent;
import MainFolder.Checkers.RandomAgent;
import MainFolder.Reversi.AlphaBetaAgentR;
import MainFolder.Reversi.MinimaxAgentR;
import MainFolder.Reversi.RandomAgentR;
import MainFolder.Reversi.Reversi;
import java.awt.Color;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.Timer;

/**
 *
 * @author Ryan Kelly
 */
public class CheckersView extends javax.swing.JFrame implements MouseListener, WindowListener {
    
    public static int rows = 8;
    public static int columns = 8;
    public static Color col1 = Color.BLACK;
    public static Color col2 = Color.WHITE;
    static Board Board = new Board();
    static List<String> AvailableMoves = new ArrayList();
    static Checkers checkers = new Checkers();
    static Reversi reversi = new Reversi();
    static RandomAgent randomAgent = new RandomAgent();
    static MinimaxAgent minimaxAgent = new MinimaxAgent();
    static AlphaBetaAgent alphaBetaAgent = new AlphaBetaAgent();
    
    static MinimaxAgentR minimaxAgentReversi = new MinimaxAgentR();
    static AlphaBetaAgentR alphaBetaReversi = new AlphaBetaAgentR();
    static RandomAgentR randomAgentReversi = new RandomAgentR();
    
    static javax.swing.Timer timer;
    static BoardPanel boardPanel = new BoardPanel(Board);

    static Menu menu = new Menu();
    static String Algorithm;
    static int Depth;
    
    public CheckersView() {
        
        initComponents();
        addMouseListener(this);
        addWindowListener(this);
        setLayout(null);
        setVisible(true);
        //tartGame(this);startGame(this);
    }

//
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backToMenu = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1200, 900));

        backToMenu.setText("Menu");
        backToMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backToMenuActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backToMenu)
                .addContainerGap(623, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(534, Short.MAX_VALUE)
                .addComponent(backToMenu)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backToMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backToMenuActionPerformed
        dispose();
        Menu menu = new Menu();
        menu.setVisible(true);
        while (menu.PlayCheckers == false && menu.PlayReversi == false) {
            try {
                Thread.sleep(200);
            } catch (InterruptedException ex) {
                Logger.getLogger(CheckersView.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_backToMenuActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws InterruptedException, IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CheckersView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CheckersView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CheckersView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CheckersView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        mainMenu();
        
    }
    
    public static void mainMenu() throws InterruptedException, IOException {
        menu = new Menu();
        menu.myComponents();
        menu.setVisible(true);
        while (menu.PlayCheckers == false && menu.PlayReversi == false) {
            Thread.sleep(200);
        }
        
        CheckersView c = new CheckersView();
        boardPanel.setVisible(true);
        c.add(boardPanel);
        
        while (Algorithm == null) {
            Thread.sleep(200);
        }
        
        if (menu.PlayCheckers == true) {
            Board.setCheckerBoard();
            boardPanel.updateBoardPanel(Board);
            boardPanel.revalidate();
            
            while (!checkers.isOver(Board)) {
                if (Board.turn == 1) {
                    if (Algorithm == "Minimax") {
                        minimaxAgent.makeMove(Board);
                    } else if (Algorithm == "Alpha Beta") {
                        alphaBetaAgent.makeMove(Board);
                    }
                    else randomAgent.makeMove(Board);
                    
                } else {
                    while (Board.turn == 2) {
                        try {
                            Thread.sleep(1000);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(CheckersView.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    
                }
                boardPanel.updateBoardPanel(Board);
                boardPanel.revalidate();
                
            }
        } else {
            Board.setReversiBoard();
            boardPanel.updateBoardPanel(Board);
            boardPanel.revalidate();
            
            while (!reversi.isOver(Board)) {
                if (Board.turn == 1) {
                    if (Algorithm == "Minimax") {
                        minimaxAgentReversi.makeMove(Board);
                    } else if (Algorithm == "Alpha Beta") {
                        alphaBetaReversi.makeMove(Board);
                    }
                    else randomAgentReversi.makeMove(Board);
                    
                    Thread.sleep(1000);
                } else {
                    while (Board.turn == 2) {
                        Thread.sleep(1000);
                    }
                    
                }
                boardPanel.updateBoardPanel(Board);
                boardPanel.revalidate();
            }
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backToMenu;
    // End of variables declaration//GEN-END:variables

    @Override
    public void mouseClicked(MouseEvent e) {
        
       
    }
    
    @Override
    public void mousePressed(MouseEvent arg0) {
        
    }
    
    @Override
    public void mouseReleased(MouseEvent arg0) {
        
    }
    
    @Override
    public void mouseEntered(MouseEvent arg0) {
    }
    
    @Override
    public void mouseExited(MouseEvent arg0) {
        
    }
    
    public static void makeMove(Board game, String current, String move) {
        String[] CurrentS = current.split(",");
        String[] MoveS = move.split(",");
        
        int size = CurrentS.length;
        int[] Current = new int[size];
        int[] Move = new int[size];
        for (int i = 0; i < size; i++) {
            Current[i] = Integer.parseInt(CurrentS[i]);
            Move[i] = Integer.parseInt(MoveS[i]);
            
        }
        
        if (checkers.isValidMove(game, Current, Move) == true) {
            if (checkers.isDoubleJump(game, Current, Move)) {
                int turn = game.turn;
                int[] middleMove = checkers.ReturnDoubleJump(game, Current, Move);
                minimaxAgent.SimulatePlay(game, Current[0] + "," + Current[1], middleMove[0] + "," + middleMove[1]);
                game.turn = turn;
                minimaxAgent.SimulatePlay(game, middleMove[0] + "," + middleMove[1], Move[0] + "," + Move[1]);
                
            } else {
                
                if (Move[0] == Current[0] + 2 && Move[1] == Current[1] + 2) {
                    game.board[Current[0] + 1][Current[1] + 1] = 0;
                } else if (Move[0] == Current[0] + 2 && Move[1] == Current[1] - 2) {
                    game.board[Current[0] + 1][Current[1] - 1] = 0;
                } else if (Move[0] == Current[0] - 2 && Move[1] == Current[1] + 2) {
                    game.board[Current[0] - 1][Current[1] + 1] = 0;
                } else if (Move[0] == Current[0] - 2 && Move[1] == Current[1] - 2) {
                    game.board[Current[0] - 1][Current[1] - 1] = 0;
                }
                
                if (game.turn == 1) {
                    if (Move[0] == 7) {
                        game.board[Move[0]][Move[1]] = game.turn + 2;
                        game.board[Current[0]][Current[1]] = 0;
                    } else {
                        game.board[Move[0]][Move[1]] = game.board[Current[0]][Current[1]];
                        game.board[Current[0]][Current[1]] = 0;
                    }
                } else if (game.turn == 2) {
                    if (Move[0] == 0) {
                        game.board[Move[0]][Move[1]] = game.turn + 2;
                        game.board[Current[0]][Current[1]] = 0;
                    } else {
                        game.board[Move[0]][Move[1]] = game.board[Current[0]][Current[1]];
                        game.board[Current[0]][Current[1]] = 0;
                    }
                    
                }
                
                if (game.turn == 1) {
                    game.turn = 2;
                } else {
                    game.turn = 1;
                }
            }
        }
        
    }
    
    public static void makeMove(Board ReversiBoard, String move) {
        
        int row = Integer.parseInt(move.split(",")[0]);
        int col = Integer.parseInt(move.split(",")[1]);
        
        ReversiBoard.board[row][col] = ReversiBoard.turn;
        
        ImplementMove(ReversiBoard, -1, -1, row, col);
        ImplementMove(ReversiBoard, -1, 0, row, col);
        ImplementMove(ReversiBoard, -1, 1, row, col);
        
        ImplementMove(ReversiBoard, 0, -1, row, col);
        ImplementMove(ReversiBoard, 0, 1, row, col);
        
        ImplementMove(ReversiBoard, 1, -1, row, col);
        ImplementMove(ReversiBoard, 1, 0, row, col);
        ImplementMove(ReversiBoard, 1, 1, row, col);
        
        if (ReversiBoard.turn == 1) {
            ReversiBoard.turn = 2;
        } else {
            ReversiBoard.turn = 1;
        }
        
    }
    
    public static boolean ImplementMove(Board ReversiBoard, int directionRow, int directionCol, int row, int column) {
        if ((row + directionRow) < 0 || (row + directionRow > 7)) {
            return false;
        }
        
        if ((column + directionCol < 0) || (column + directionCol > 7)) {
            return false;
        }
        if (ReversiBoard.board[row + directionRow][column + directionCol] == 0) {
            return false;
        }
        if (ReversiBoard.board[row + directionRow][column + directionCol] == ReversiBoard.turn) {
            return true;
        } else {
            if (ImplementMove(ReversiBoard, directionRow, directionCol, row + directionRow, column + directionCol)) {
                ReversiBoard.board[row + directionRow][column + directionCol] = ReversiBoard.turn;
                return true;
                
            } else {
                return false;
            }
        }
        
    }
    
    @Override
    public void windowOpened(WindowEvent arg0) {
        setup setup = new setup();
        JOptionPane pane = new JOptionPane();
        pane.showMessageDialog(null, setup, "Information", JOptionPane.INFORMATION_MESSAGE);
        for (Enumeration<AbstractButton> buttons = setup.buttonGroup.getElements(); buttons.hasMoreElements();) {
            AbstractButton button = buttons.nextElement();
            if (button.isSelected()) {
                if (button.getText() == "Minimax") {
                    Algorithm = button.getText();
                    Depth = setup.sliderMinimax.getValue();
                } else if (button.getText() == "Alpha Beta") {
                    Algorithm = button.getText();
                    Depth = setup.sliderAlphaBeta.getValue();
                } else {
                    Algorithm = button.getText();
                }
            }
        }
        System.out.println(Algorithm);
        
    }
    
    @Override
    public void windowClosing(WindowEvent arg0) {
        
    }
    
    @Override
    public void windowClosed(WindowEvent arg0) {
        
    }
    
    @Override
    public void windowIconified(WindowEvent arg0) {
        
    }
    
    @Override
    public void windowDeiconified(WindowEvent arg0) {
        
    }
    
    @Override
    public void windowActivated(WindowEvent arg0) {
        
    }
    
    @Override
    public void windowDeactivated(WindowEvent arg0) {
    }
}
