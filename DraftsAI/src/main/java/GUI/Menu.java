package GUI;

import javax.swing.JButton;
import javax.swing.JFrame;
import Checkers.AlphaBetaAgent;
import MainFolder.Board;
import Checkers.Checkers;
import Checkers.MinimaxAgent;
import Checkers.RandomAgent;
import Reversi.AlphaBetaAgentR;
import Reversi.MinimaxAgentR;
import Reversi.RandomAgentR;
import Reversi.Reversi;
import java.awt.Color;
import java.awt.Container;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.AbstractButton;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Ryan Kelly
 */
public class Menu extends javax.swing.JFrame {

    public static int rows = 8;
    public static int columns = 8;
    public static Color col1 = Color.BLACK;
    public static Color col2 = Color.WHITE;
    final static int DEPTH_TO_BUILD = 6;
    static int counter = 0;
    static int[] Current;
    static List<String> AvailableMoves = new ArrayList();
    static int[] Move;
    static RandomAgent randomAgent = new RandomAgent();
    static MinimaxAgent minimaxAgent = new MinimaxAgent();
    static AlphaBetaAgent alphaBetaAgent = new AlphaBetaAgent();
    static Board CheckersBoard = new Board();
    static Board ReversiBoard = new Board();
    static Reversi reversi = new Reversi();
    static Checkers checkers = new Checkers();
    static RandomAgentR reversiRandom = new RandomAgentR();
    static MinimaxAgentR reversiMinimax = new MinimaxAgentR();
    static AlphaBetaAgentR alphaBetaReverse = new AlphaBetaAgentR();
    static Boolean PlayCheckers = false;
    static Boolean PlayReversi = false;
    static Boolean PlayConnect4 = false;
    static String pieceIconPath = "Resources/";

    public Menu() {
        CheckersBoard.setCheckerBoard();
        ReversiBoard.setReversiBoard();
        initComponents();
        try {
            myComponents();
        } catch (IOException ex) {
            Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
        }
        setLayout(null);
        setVisible(true);
    }

    public void myComponents() throws IOException {
        JPanel CheckersDemo = CheckersDemo();
        JPanel ReversiDemo = ReversiDemo();
        add(CheckersDemo);
        add(ReversiDemo);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        playCheckers = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jToolBar1 = new javax.swing.JToolBar();
        playConnect4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 204, 255));

        jButton1.setBackground(new java.awt.Color(204, 204, 255));
        jButton1.setText("Play Reversi!");
        jButton1.setPreferredSize(new java.awt.Dimension(115, 32));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        playCheckers.setBackground(new java.awt.Color(204, 204, 255));
        playCheckers.setText("Play Checkers!");
        playCheckers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playCheckersActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(204, 204, 255));
        jLabel1.setFont(new java.awt.Font("Sylfaen", 1, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Welcome");

        jToolBar1.setRollover(true);

        playConnect4.setText("Play Connect 4!");
        playConnect4.setPreferredSize(new java.awt.Dimension(115, 32));
        playConnect4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playConnect4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(playCheckers, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(95, 95, 95)
                .addComponent(playConnect4, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(271, 271, 271)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(284, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(115, 115, 115)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 371, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(playCheckers, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(playConnect4, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(55, 55, 55))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void playCheckersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playCheckersActionPerformed
        PlayCheckers = true;
        dispose();

//        setVisible(false);
//        CheckersView checkers = new CheckersView();
//        checkers.setVisible(true);
    }//GEN-LAST:event_playCheckersActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        PlayReversi = true;
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void playConnect4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playConnect4ActionPerformed
        PlayConnect4 = true;
        dispose();
    }//GEN-LAST:event_playConnect4ActionPerformed

  

    public static JPanel CheckersDemo() throws IOException {
        JPanel pane = new JPanel();
        pane.setBounds(60, 390, 200, 200);
        pane.setLayout(new GridLayout(rows, columns));
        Color temp;
        for (int i = 0; i < rows; i++) {
            if (i % 2 == 0) {
                temp = col1;
            } else {
                temp = col2;
            }
            outerloop:
            for (int j = 0; j < columns; j++) {

                if (CheckersBoard.GetBoard()[i][j] == 1 || CheckersBoard.GetBoard()[i][j] == 3) {
                    BufferedImage image = ImageIO.read(new File(pieceIconPath + "black" + ".png"));
                    TilePanel tile = new TilePanel(i, j);
                    tile.setIcon(new ImageIcon(image));
                    tile.setOpaque(true);
                    tile.setBackground(temp);
                    pane.add(tile);
                } else if (CheckersBoard.GetBoard()[i][j] == 2 || CheckersBoard.GetBoard()[i][j] == 4) {
                    BufferedImage image = ImageIO.read(new File(pieceIconPath + "red" + ".png"));
                    TilePanel tile = new TilePanel(i, j);
                    tile.setIcon(new ImageIcon(image));
                    tile.setOpaque(true);
                    tile.setBackground(temp);
                    pane.add(tile);
                } else {

                    if (!AvailableMoves.isEmpty()) {
                        boolean isAvailableMove = false;
                        for (int l = 0; l < AvailableMoves.size(); l++) {
                            String[] tempM = AvailableMoves.get(l).split("-");
                            String[] CurrentS = tempM[1].split(",");
                            int size = CurrentS.length;
                            int[] Current = new int[size];
                            for (int a = 0; a < size; a++) {
                                Current[a] = Integer.parseInt(CurrentS[a]);
                            }

                            if (i == Current[0] && j == Current[1]) {
                                isAvailableMove = true;

                            }
                        }
                        if (isAvailableMove == true) {
                            JPanel panel = new JPanel();
                            panel.setBackground(Color.GREEN);
                            pane.add(panel);
                        } else {
                            JPanel panel = new JPanel();
                            panel.setBackground(temp);
                            pane.add(panel);
                        }

                    } else {
                        JPanel panel = new JPanel();
                        panel.setBackground(temp);
                        pane.add(panel);
                    }

                }

                if (temp == col1) {
                    temp = col2;
                } else {
                    temp = col1;
                }

            }
        }
        return pane;
    }

    public static JPanel ReversiDemo() throws IOException {
        JPanel pane = new JPanel();
        pane.setBounds(720, 390, 200, 200);
        pane.setLayout(new GridLayout(rows, columns));
        Color temp;
        for (int i = 0; i < rows; i++) {
            if (i % 2 == 0) {
                temp = col1;
            } else {
                temp = col2;
            }
            outerloop:
            for (int j = 0; j < columns; j++) {

                if (ReversiBoard.GetBoard()[i][j] == 1 || ReversiBoard.GetBoard()[i][j] == 3) {
                    BufferedImage image = ImageIO.read(new File(pieceIconPath + "black" + ".png"));
                    TilePanel tile = new TilePanel(i, j);
                    tile.setIcon(new ImageIcon(image));
                    tile.setOpaque(true);
                    tile.setBackground(temp);
                    pane.add(tile);
                } else if (ReversiBoard.GetBoard()[i][j] == 2 || ReversiBoard.GetBoard()[i][j] == 4) {
                    BufferedImage image = ImageIO.read(new File(pieceIconPath + "red" + ".png"));
                    TilePanel tile = new TilePanel(i, j);
                    tile.setIcon(new ImageIcon(image));
                    tile.setOpaque(true);
                    tile.setBackground(temp);
                    pane.add(tile);
                } else {

                    if (!AvailableMoves.isEmpty()) {
                        boolean isAvailableMove = false;
                        for (int l = 0; l < AvailableMoves.size(); l++) {
                            String[] tempM = AvailableMoves.get(l).split("-");
                            String[] CurrentS = tempM[1].split(",");
                            int size = CurrentS.length;
                            int[] Current = new int[size];
                            for (int a = 0; a < size; a++) {
                                Current[a] = Integer.parseInt(CurrentS[a]);
                            }

                            if (i == Current[0] && j == Current[1]) {
                                isAvailableMove = true;

                            }
                        }
                        if (isAvailableMove == true) {
                            JPanel panel = new JPanel();
                            panel.setBackground(Color.GREEN);
                            pane.add(panel);
                        } else {
                            JPanel panel = new JPanel();
                            panel.setBackground(temp);
                            pane.add(panel);
                        }

                    } else {
                        JPanel panel = new JPanel();
                        panel.setBackground(temp);
                        pane.add(panel);
                    }

                }

                if (temp == col1) {
                    temp = col2;
                } else {
                    temp = col1;
                }

            }
        }
        return pane;
    }

    private javax.swing.JPanel CheckersDemo;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton playCheckers;
    private javax.swing.JButton playConnect4;
    // End of variables declaration//GEN-END:variables
}
