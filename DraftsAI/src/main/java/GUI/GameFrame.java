/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Connect4.*;
import MainFolder.Board;
import Checkers.*;
import Reversi.*;
import java.awt.event.*;
import java.io.IOException;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;

/**
 *
 * @author Ryan Kelly
 */
public class GameFrame extends javax.swing.JFrame implements WindowListener {

    static Boolean popUp = true;
    static final long timerAgent = 500L;
    static long timestart = -1L;
    public static int rows = 8;
    public static int columns = 8;
    static Board Board = new Board();
    static List<String> AvailableMoves = new ArrayList();
    static Checkers checkers = new Checkers();
    static Reversi reversi = new Reversi();
    static Connect4 connect4 = new Connect4();

    static RandomConnectFour RandomConnect4 = new RandomConnectFour();
    static MinimaxConnect4 MinimaxCOnnect4 = new MinimaxConnect4();
    static AlphaBetaConnectFour AlpgaBetaConnect4 = new AlphaBetaConnectFour();

    static RandomAgent randomAgent = new RandomAgent();
    static MinimaxAgent minimaxAgent = new MinimaxAgent();
    static AlphaBetaAgent alphaBetaAgent = new AlphaBetaAgent();

    static MinimaxAgentR minimaxAgentReversi = new MinimaxAgentR();
    static AlphaBetaAgentR alphaBetaReversi = new AlphaBetaAgentR();
    static RandomAgentR randomAgentReversi = new RandomAgentR();

    static javax.swing.Timer timer;

    static BoardPanel boardPanel = new BoardPanel(Board);

    static Menu menu;

    static String PlayerOneAlgorithm;
    static int PlayerOneDepth;

    static String PlayerTwoAlgorithm;
    static int PlayerTwoDepth;

    static int BLACK = 2;
    static int RED = 1;

    static String PlayerOne;
    static String PlayerTwo;

    public GameFrame() {
        initComponents();
        addWindowListener(this);
        setLayout(null);
        setVisible(true);
        addMenuBar();

    }

    public void addMenuBar() {
        final JMenuBar boardMenu = new JMenuBar();
        final JMenu fileMenu = new JMenu("Options");
        final JMenuItem switchSides = new JMenuItem("Switch Sides");
        switchSides.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                System.out.println("SwitchSides");
            }
        });
        fileMenu.add(switchSides);

        final JMenuItem newGame = new JMenuItem("New Game");
        newGame.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if (menu.PlayCheckers == true) {
                    Board.setCheckerBoard();

                } else if (menu.PlayReversi == true) {
                    Board.setReversiBoard();
                } else {
                    Board.setConnect4Board();
                }
                boardPanel.updateBoardPanel(Board);
                boardPanel.revalidate();
            }
        });
        fileMenu.add(newGame);
        fileMenu.add(switchSides);
        boardMenu.add(fileMenu);
        this.setJMenuBar(boardMenu);
    }

//
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1200, 900));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 690, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 572, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws InterruptedException, IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        mainMenu();

    }

    public static void mainMenu() throws InterruptedException, IOException {

        menu = new Menu();
        menu.myComponents();
        menu.setVisible(true);
        while (menu.PlayCheckers == false && menu.PlayReversi == false && menu.PlayConnect4 == false) {
            Thread.sleep(200);
        }

        GameFrame c = new GameFrame();
        boardPanel.setVisible(true);
        c.add(boardPanel);
        while (popUp == true) {
            Thread.sleep(200);
        }
        if (menu.PlayCheckers == true) {
            startCheckers();
        } else if (menu.PlayReversi == true) {
            startReversi();
        } else {
            startConnect4();
        }

    }

    public static void startCheckers() {
        Board.setCheckerBoard();
        boardPanel.updateBoardPanel(Board);
        boardPanel.revalidate();

        if (PlayerTwo.equals("AI") || PlayerOne.equals("AI")) {
            javax.swing.Timer t = new javax.swing.Timer(1000, new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    CheckWin();
                    if (Board.turn == 1 && PlayerOne.equals("AI")) {

                        if (null == PlayerOneAlgorithm) {
                            randomAgent.makeMove(Board);
                        } else {
                            switch (PlayerOneAlgorithm) {
                                case "Minimax":
                                    minimaxAgent.makeMove(Board);
                                    break;
                                case "Alpha Beta":
                                    System.out.println("Alpha Beta making move...");
                                    alphaBetaAgent.PlayingFor = true;
                                    alphaBetaAgent.makeMove(Board);
                                    break;
                                default:
                                    randomAgent.makeMove(Board);
                                    break;
                            }
                        }
                        boardPanel.updateBoardPanel(Board);
                        boardPanel.revalidate();
                    }
                    if (PlayerOne.equals("AI") && PlayerTwo.equals("AI")) {
                        if (timestart < 0) {
                            timestart = System.currentTimeMillis();
                        }
                    }
                    CheckWin();

                    if (Board.turn == 2 && PlayerTwo.equals("AI")) {
                        long time = System.currentTimeMillis() - timestart;
                        if (time > timerAgent) {
                            if (null == PlayerTwoAlgorithm) {
                                randomAgent.makeMove(Board);
                            } else {
                                switch (PlayerTwoAlgorithm) {
                                    case "Minimax":
                                        minimaxAgent.makeMove(Board);
                                        break;
                                    case "Alpha Beta":
                                        alphaBetaAgent.PlayingFor = false;
                                        System.out.println("Alpha Beta making move...");
                                        alphaBetaAgent.makeMove(Board);
                                        break;
                                    default:
                                        randomAgent.makeMove(Board);
                                        break;
                                }
                            }
                            boardPanel.updateBoardPanel(Board);
                            boardPanel.revalidate();
                            timestart = -1L;
                        }
                    }

                }
            });

            t.start();
        }
    }

    public static void startReversi() {
        Board.setReversiBoard();
        boardPanel.updateBoardPanel(Board);
        boardPanel.revalidate();

        if (PlayerTwo.equals("AI") || PlayerOne.equals("AI")) {
            javax.swing.Timer t = new javax.swing.Timer(1000, new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    CheckWin();
                    if (Board.turn == 1 && PlayerOne.equals("AI")) {

                        if (null == PlayerOneAlgorithm) {
                            randomAgentReversi.makeMove(Board);
                        } else {
                            switch (PlayerOneAlgorithm) {
                                case "Minimax":
                                    minimaxAgentReversi.makeMove(Board);
                                    break;
                                case "Alpha Beta":
                                    alphaBetaReversi.PlayingFor = true;
                                    alphaBetaReversi.makeMove(Board);
                                    break;
                                default:
                                    randomAgentReversi.makeMove(Board);
                                    break;
                            }
                        }
                        boardPanel.updateBoardPanel(Board);
                        boardPanel.revalidate();
                    }
                    if (PlayerOne.equals("AI") && PlayerTwo.equals("AI")) {
                        if (timestart < 0) {
                            timestart = System.currentTimeMillis();
                        }
                    }
                    CheckWin();

                    if (Board.turn == 2 && PlayerTwo.equals("AI")) {
                        long time = System.currentTimeMillis() - timestart;
                        if (time > timerAgent) {
                            if (null == PlayerTwoAlgorithm) {
                                randomAgentReversi.makeMove(Board);
                            } else {
                                switch (PlayerTwoAlgorithm) {
                                    case "Minimax":
                                        minimaxAgentReversi.makeMove(Board);
                                        break;
                                    case "Alpha Beta":
                                        alphaBetaReversi.PlayingFor = false;
                                        alphaBetaReversi.makeMove(Board);
                                        break;
                                    default:
                                        randomAgentReversi.makeMove(Board);
                                        break;
                                }
                            }
                            boardPanel.updateBoardPanel(Board);
                            boardPanel.revalidate();
                            timestart = -1L;
                        }
                    }

                }
            });

            t.start();
        }
    }

    public static void startConnect4() {
        Board.setConnect4Board();
        boardPanel.updateBoardPanel(Board);
        boardPanel.revalidate();

        if (PlayerTwo.equals("AI") || PlayerOne.equals("AI")) {
            javax.swing.Timer t = new javax.swing.Timer(1000, new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    CheckWin();
                    if (Board.turn == 1 && PlayerOne.equals("AI")) {

                        if (null == PlayerOneAlgorithm) {
                            RandomConnect4.makeMove(Board);
                        } else {
                            switch (PlayerOneAlgorithm) {
                                case "Minimax":
                                    MinimaxCOnnect4.makeMove(Board);
                                    break;
                                case "Alpha Beta":
                                    AlpgaBetaConnect4.makeMove(Board);
                                    break;
                                default:
                                    RandomConnect4.makeMove(Board);
                                    break;
                            }
                        }
                        boardPanel.updateBoardPanel(Board);
                        boardPanel.revalidate();
                    }
                    if (PlayerOne.equals("AI") && PlayerTwo.equals("AI")) {
                        if (timestart < 0) {
                            timestart = System.currentTimeMillis();
                        }
                    }
                    CheckWin();

                    if (Board.turn == 2 && PlayerTwo.equals("AI")) {
                        long time = System.currentTimeMillis() - timestart;
                        if (time > timerAgent) {
                            if (null == PlayerTwoAlgorithm) {
                                RandomConnect4.makeMove(Board);
                            } else {
                                switch (PlayerTwoAlgorithm) {
                                    case "Minimax":
                                        MinimaxCOnnect4.makeMove(Board);
                                        break;
                                    case "Alpha Beta":
                                        AlpgaBetaConnect4.makeMove(Board);
                                        break;
                                    default:
                                        RandomConnect4.makeMove(Board);
                                        break;
                                }
                            }
                            boardPanel.updateBoardPanel(Board);
                            boardPanel.revalidate();
                            timestart = -1L;
                        }
                    }

                }
            });

            t.start();
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    public static void makeMove(Board Board, String move) {
        if (menu.PlayReversi == true) {
            int row = Integer.parseInt(move.split(",")[0]);
            int col = Integer.parseInt(move.split(",")[1]);

            Board.board[row][col] = Board.turn;

            ImplementMove(Board, -1, -1, row, col);
            ImplementMove(Board, -1, 0, row, col);
            ImplementMove(Board, -1, 1, row, col);

            ImplementMove(Board, 0, -1, row, col);
            ImplementMove(Board, 0, 1, row, col);

            ImplementMove(Board, 1, -1, row, col);
            ImplementMove(Board, 1, 0, row, col);
            ImplementMove(Board, 1, 1, row, col);

            if (Board.turn == 1) {
                Board.turn = 2;
            } else {
                Board.turn = 1;
            }
        } else if (menu.PlayConnect4 == true) {
            int row = Integer.parseInt(move.split(",")[0]);
            int col = Integer.parseInt(move.split(",")[1]);
            Board.board[row][col] = Board.turn;

            if (Board.turn == 1) {
                Board.turn = 2;
            } else {
                Board.turn = 1;
            }
        }

    }

    public static boolean ImplementMove(Board ReversiBoard, int directionRow, int directionCol, int row, int column) {
        if ((row + directionRow) < 0 || (row + directionRow > 7)) {
            return false;
        }

        if ((column + directionCol < 0) || (column + directionCol > 7)) {
            return false;
        }
        if (ReversiBoard.board[row + directionRow][column + directionCol] == 0) {
            return false;
        }
        if (ReversiBoard.board[row + directionRow][column + directionCol] == ReversiBoard.turn) {
            return true;
        } else {
            if (ImplementMove(ReversiBoard, directionRow, directionCol, row + directionRow, column + directionCol)) {
                ReversiBoard.board[row + directionRow][column + directionCol] = ReversiBoard.turn;
                return true;

            } else {
                return false;
            }
        }

    }

    @Override
    public void windowOpened(WindowEvent arg0) {
        setup setup = new setup();
        JOptionPane pane = new JOptionPane();
        pane.showMessageDialog(null, setup, "Information", JOptionPane.INFORMATION_MESSAGE);

        Object selected = setup.Player1.getSelectedItem();
        if (selected.toString().equals("AI")) {
            PlayerOne = "AI";
            for (Enumeration<AbstractButton> buttons = setup.buttonGroup.getElements(); buttons.hasMoreElements();) {
                AbstractButton button = buttons.nextElement();
                if (button.isSelected()) {
                    if (button.getText() == "Minimax") {
                        PlayerOneAlgorithm = button.getText();
                        PlayerOneDepth = setup.sliderMinimaxPlayer1.getValue();
                    } else if (button.getText() == "Alpha Beta") {
                        PlayerOneAlgorithm = button.getText();
                        PlayerOneDepth = setup.sliderAlphaBetaPlayer1.getValue();
                    } else {
                        PlayerOneAlgorithm = button.getText();
                    }
                }
            }
        } else {
            PlayerOne = "Human";
        }

        selected = setup.Player2.getSelectedItem();
        if (selected.toString().equals("AI")) {
            PlayerTwo = "AI";
            for (Enumeration<AbstractButton> buttons = setup.buttonGroup2.getElements(); buttons.hasMoreElements();) {
                AbstractButton button = buttons.nextElement();
                if (button.isSelected()) {
                    if (button.getText() == "Minimax") {
                        PlayerTwoAlgorithm = button.getText();
                        PlayerTwoDepth = setup.sliderMinimax1Player2.getValue();
                    } else if (button.getText() == "Alpha Beta") {
                        PlayerTwoAlgorithm = button.getText();
                        PlayerTwoDepth = setup.sliderAlphaBeta1Player2.getValue();
                    } else {
                        PlayerTwoAlgorithm = button.getText();
                    }
                }
            }
        } else {
            PlayerTwo = "Human";
        }

        popUp = false;

        System.out.println("PLAYER ONE HUMAN/AI? " + PlayerOne);
        if (PlayerOne.equals("AI")) {
            System.out.println("PLAYER ONE ALGORITHM? " + PlayerOneAlgorithm);
            System.out.println("PLAYER ONE DEPTH TO SEARCH? " + PlayerOneDepth);
        }

        System.out.println("PLAYER TWO HUMAN/AI? " + PlayerTwo);
        if (PlayerTwo.equals("AI")) {
            System.out.println("PLAYER TWO ALGORITHM? " + PlayerTwoAlgorithm);
            System.out.println("PLAYER TWO DEPTH TO SEARCH? " + PlayerTwoDepth);
        }
    }

    @Override
    public void windowClosing(WindowEvent arg0) {

    }

    @Override
    public void windowClosed(WindowEvent arg0) {

    }

    @Override
    public void windowIconified(WindowEvent arg0) {

    }

    @Override
    public void windowDeiconified(WindowEvent arg0) {

    }

    @Override
    public void windowActivated(WindowEvent arg0) {

    }

    @Override
    public void windowDeactivated(WindowEvent arg0) {
    }

    public static void CheckWin() {
        String winner;
        if ((checkers.isOver(Board)) && menu.PlayCheckers == true) {
            int player = checkers.CheckWin(Board);
            if (player == 1) {
                winner = "black";
            } else if (player == 2) {
                winner = "red";
            } else {
                winner = "draw";
            }
            ResultGame(winner);

        } else if (menu.PlayReversi == true && reversi.isOver(Board)) {
            int player = reversi.CheckWin(Board);
            if (player == 1) {
                winner = "black";
            } else if (player == 2) {
                winner = "red";
            } else {
                winner = "draw";
            }
            ResultGame(winner);
        } else if (menu.PlayConnect4 == true) {
            if (connect4.isOver(Board)) {
                int player = connect4.CheckWin(Board);
                if (player == 1) {
                    winner = "black";
                } else if (player == 2) {
                    winner = "red";
                } else {
                    winner = "draw";
                }
                ResultGame(winner);
            }
        }

    }

    public static void resetGame() {
        if (menu.PlayCheckers == true) {
            Board.setCheckerBoard();

        } else if (menu.PlayReversi == true) {
            Board.setReversiBoard();

        } else {
            Board.setConnect4Board();

        }
        boardPanel.updateBoardPanel(Board);
        boardPanel.revalidate();

    }

    public static void ResultGame(String winner) {

        int response = JOptionPane.showConfirmDialog(boardPanel,
                winner + " won the game! Restart Game?", "Restart", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

        if (response == JOptionPane.YES_OPTION) {
            resetGame();
            boardPanel.updateBoardPanel(Board);
            boardPanel.revalidate();
        }
        if (response == JOptionPane.NO_OPTION) {
            System.exit(0);
        } else if (response == JOptionPane.CLOSED_OPTION) {
            System.exit(0);
        }
    }

}
